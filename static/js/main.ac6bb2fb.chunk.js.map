{"version":3,"sources":["components/elements/Button.tsx","components/elements/Input.tsx","components/elements/Textarea.tsx","components/Form.tsx","hooks/index.tsx","utlis/index.ts","components/Result.tsx","components/RegistrationForm.tsx","components/ContactForm.tsx","components/App.tsx","index.tsx"],"names":["Button","text","style","type","Input","label","isRequired","name","rest","htmlFor","id","Textarea","Form","children","onSubmit","inputProps","useState","inputs","setInputs","setInput","i","input","Object","assign","map","value","onChange","e","target","forEach","useInputs","Children","toArray","filter","child","props","updatedInputs","inputReset","errors","validators","updatedChildren","cloneElement","key","preventDefault","formData","reduce","getFormData","values","length","Result","data","className","keys","color","RegistrationForm","setData","setErrors","ContactForm","placeholder","cols","rows","width","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac6bb2fb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype Props = {\r\n  text: string;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nconst Button = ({ text, style = {} }: Props) => (\r\n  <button style={style} type=\"submit\">\r\n    {text}\r\n  </button>\r\n);\r\n\r\nexport default Button","import React from 'react'\r\n\r\ntype Props = {\r\n  label: string;\r\n  name: string;\r\n  isRequired?: boolean;\r\n  placeholder?: string;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\n\r\n const Input = ({ label, isRequired = false, name, style = {}, ...rest }: Props) => (\r\n  <>\r\n    {label && <label htmlFor={label}>{label}</label>}\r\n    <input id={label} style={style} {...rest} />\r\n  </>\r\n);\r\n\r\nexport default Input;","import React from 'react'\r\n\r\ntype Props = {\r\n  label: string;\r\n  name: string;\r\n  isRequired?: boolean;\r\n  placeholder?: string;\r\n  cols?: number;\r\n  rows?: number;\r\n  style?: React.CSSProperties;\r\n};\r\n\r\nconst Textarea = ({ label, isRequired = false, style = {}, ...rest }: Props) => (\r\n  <>\r\n    {label && <label htmlFor={label}>{label}</label>}\r\n    <textarea id={label} style={style} {...rest}></textarea>\r\n  </>\r\n);\r\n\r\nexport default Textarea;","import React, { Children, cloneElement } from \"react\";\r\nimport { Button } from \"./elements/index\";\r\nimport { useInputs } from \"../hooks/index\";\r\nimport { validators, getFormData } from \"../utlis/index\";\r\n\r\ntype Props = {\r\n  style?: React.CSSProperties;\r\n  onSubmit: (formData: {}, error: {}) => void;\r\n};\r\n\r\nexport const Form: React.FC<Props> = ({ children, onSubmit, style = {} }) => {\r\n  //TODO find the right type of the child element and replace with any.\r\n  const inputs = Children.toArray(children)\r\n    .filter((child: any) => child.type !== Button)\r\n    .map((input: any) => input.props);\r\n\r\n  const [updatedInputs, inputReset] = useInputs(inputs);\r\n\r\n  const errors = validators(updatedInputs);\r\n  \r\n  const updatedChildren = Children.map(children, (child: any, i: number) =>\r\n    cloneElement(child, { key: i, ...updatedInputs[i] })\r\n  );\r\n\r\n  const handleSubmit = (e: React.FormEvent<EventTarget>) => {\r\n    e.preventDefault();\r\n    const formData = getFormData(updatedInputs);\r\n    onSubmit(formData, errors);\r\n    if (!Object.values(errors).length) inputReset();\r\n    \r\n  };\r\n\r\n  return (\r\n    <form style={style} onSubmit={handleSubmit}>\r\n      {updatedChildren}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import { useState } from \"react\";\r\n\r\nexport type InputTypes = {\r\n  label: string;\r\n  name: string;\r\n  isRequired?: boolean;\r\n  placeholder?: string;\r\n  cols?: number;\r\n  rows?: number;\r\n  style?: React.CSSProperties;\r\n  value?: string;\r\n  onChange?: () => void;\r\n};\r\n\r\nexport const useInputs = (inputProps: InputTypes[]) => {\r\n  const [inputs, setInputs] = useState<InputTypes[]>(inputProps);\r\n\r\n  const setInput = (i: number, input: InputTypes) =>\r\n    setInputs(Object.assign([...inputs], { [i]: input }));\r\n\r\n  const resetInputs = () =>\r\n    inputs.forEach((input: InputTypes, i: number) =>\r\n      setInput(i, Object.assign(input, { value: \"\" }))\r\n    );\r\n\r\n  const updatedInputs = inputs.map(({ value = \"\", ...rest }, i) => ({\r\n    ...rest,\r\n    value,\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) =>\r\n      setInput(i, { ...rest, value: e.target.value }),\r\n  }));\r\n\r\n  return [updatedInputs, resetInputs] as [InputTypes[], () => void];\r\n};\r\n","\r\nimport { InputTypes } from '../hooks/index'\r\n\r\n\r\n\r\nexport const getFormData = (inputs: InputTypes[]) => \r\n\r\ninputs.reduce((formData, {name, value})  => ({...formData, [name]: value}), {})\r\n\r\n\r\nexport const validators = (inputs: InputTypes[]) => {\r\n  \r\n  const errors: any = {}\r\n\r\n   inputs.forEach(input => {\r\n     if(input.isRequired && !input.value) {\r\n       errors[input.name] = `${input.name} is required`\r\n     }\r\n   })\r\n \r\n    return errors;\r\n \r\n }","import React from \"react\";\r\n\r\ntype Props = {\r\n  data: { [key: string]: string };\r\n  errors: { [key: string]: string };\r\n};\r\n\r\nconst Result = ({ data, errors }: Props) => {\r\n  return (\r\n    <div className=\"show-result\">\r\n      {Object.values(errors).length ? (\r\n        <ul>\r\n          <p> Whoops! ðŸ¤¬</p>\r\n          {Object.keys(errors).map((key) => (\r\n            <li style={{ color: \"red\" }} key={key}>\r\n              {errors[key]}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <ul>\r\n          {Object.keys(data).map((key) => (\r\n            <li key={key}>\r\n              <strong>{key}</strong>: {data[key]}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Result;","import React, { useState } from \"react\";\r\nimport Form from \"./Form\";\r\nimport { Input, Button } from \"./elements/index\";\r\nimport Result from './Result'\r\n\r\nconst RegistrationForm = () => {\r\n  const [data, setData] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleRegistration = (\r\n    formData: { [key: string]: string },\r\n    errors: { [key: string]: string }\r\n  ) => {\r\n    setData(formData);\r\n    setErrors(errors);\r\n  };\r\n\r\n  return (\r\n    <div className=\"registration-form\">\r\n      <h4>Registration Form</h4>\r\n      <Form onSubmit={handleRegistration}>\r\n        <Input name=\"fullname\" label=\"fullname\" isRequired />\r\n        <Input name=\"username\" label=\"username\" />\r\n        <Input name=\"phone\" label=\"phone\" isRequired />\r\n        <Input name=\"occupation\" label=\"occupation\" isRequired />\r\n        <Button text=\"Sign up\" />\r\n      </Form>\r\n\r\n      <Result data={data} errors={errors} /> \r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default RegistrationForm;\r\n","import React, {useState} from \"react\";\r\nimport Form from \"./Form\";\r\nimport { Input, Textarea, Button } from \"./elements/index\";\r\nimport Result from './Result'\r\n\r\nconst ContactForm = () => {\r\n\r\n  const [data, setData] = useState({});\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const handleContactForm = (\r\n    formData: { [key: string]: string },\r\n    errors: { [key: string]: string }\r\n  ) => {\r\n    setData(formData);\r\n    setErrors(errors);\r\n  };\r\n  return (\r\n    <div className=\"contact-form\">\r\n      <h4>Contact Form</h4>\r\n      \r\n      <Form onSubmit={handleContactForm}>\r\n        <Input name=\"firstname\" label=\"firstname\" placeholder=\"firstname\" isRequired />\r\n        <Input name=\"lastname\" label=\"lastname\" placeholder=\"lastname\" isRequired />\r\n        <Textarea name=\"message\" label=\"message\" placeholder=\"send us a message\" cols={30} rows={5} isRequired />\r\n        <Button style={ { width: 'auto'} } text=\"Send us a Message\" />\r\n      </Form>\r\n\r\n      <Result data={data} errors={errors} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactForm","import React from \"react\";\nimport RegistrationForm from \"./RegistrationForm\";\nimport ContactForm from \"./ContactForm\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <RegistrationForm />\n      <ContactForm />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}